{"meta":{"title":"Lyunvy's Blog","subtitle":"","description":"Lyunvy's Blog","author":"Lyunvy","url":"https://lyunvy.tk","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-05-03T12:21:58.518Z","updated":"2021-02-07T08:17:29.460Z","comments":false,"path":"/404.html","permalink":"https://lyunvy.tk/404.html","excerpt":"","text":""},{"title":"标签","date":"2021-05-03T12:21:58.529Z","updated":"2021-02-07T08:17:29.303Z","comments":false,"path":"tags/index.html","permalink":"https://lyunvy.tk/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-05-03T12:21:58.535Z","updated":"2021-02-07T08:17:29.444Z","comments":false,"path":"repository/index.html","permalink":"https://lyunvy.tk/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-05-03T12:21:58.532Z","updated":"2021-02-07T08:17:29.370Z","comments":false,"path":"categories/index.html","permalink":"https://lyunvy.tk/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-05-03T12:21:58.518Z","updated":"2021-02-07T11:04:55.460Z","comments":false,"path":"about/index.html","permalink":"https://lyunvy.tk/about/index.html","excerpt":"","text":"个人详细介绍"}],"posts":[{"title":"Git note","slug":"Git-note","date":"2021-05-03T12:18:26.000Z","updated":"2021-05-03T12:32:06.110Z","comments":true,"path":"/","link":"","permalink":"https://lyunvy.tk/","excerpt":"仅仅是一些个人认为有可能会遇到的问题","text":"仅仅是一些个人认为有可能会遇到的问题 廖雪峰_git教程 基本命令阮一锋_git基本命令 .gitignore文件加入规则后并未生效在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如： 1234567# 此为注释 – 将被 Git 忽略*.cs # 忽略所有 .cs 结尾的文件!ABC.cs # 但 ABC.cs 除外&#x2F;BLL # 仅仅忽略项目根目录下的 BLL 文件，不包括 subdir&#x2F;BLLbuild&#x2F; # 忽略 build&#x2F; 目录下的所有文件doc&#x2F;*.txt # 会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt 规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交： 123git rm -r --cached .git add .git commit -m &#39;update .gitignore&#39; 配置别名git 配置别名例如： $ git status–&gt;$ git config --global alias.st status–&gt;$ git st $ git log -1–&gt;$ git conflg --global alias.last &#39;log -1&#39;–&gt;$ git last --global为全局参数，不加的话仅对当前仓库有效 仓库的配置文件在.git/config中 用户的配置文件在$/.gitconfig中","categories":[{"name":"technology","slug":"technology","permalink":"https://lyunvy.tk/categories/technology/"}],"tags":[{"name":"git","slug":"git","permalink":"https://lyunvy.tk/tags/git/"}]},{"title":"对舆论的一丁点儿感受","slug":"对舆论的一丁点儿感受","date":"2021-02-15T13:33:08.000Z","updated":"2021-03-04T16:04:29.042Z","comments":true,"path":"/","link":"","permalink":"https://lyunvy.tk/","excerpt":"舆论总是在你不知情的情况下控制着你","text":"舆论总是在你不知情的情况下控制着你 网络环境看起来越来越糟糕了，诸如老人跌倒扶了反被讹之类的极度考验人性的事情充斥在获得的信息中，不免觉得这世界太黑暗了。然而，在没有网络时就没有这些东西吗？当然，太阳地下没有新鲜事，糟糕的东西也并不是网络的出现带来的，它们一直都在，只是在信息传递不方便的时候我们没有看到而已。 但是，世界上又不是只有糟糕的事情，为什么我们眼中充斥着不好的东西呢？试想一下，一条“恶有恶报”的信息和一条“好人未得善终”或是“恶人享尽富贵”的信息，哪个更吸引人的眼球？哪个更容易成为大众们的谈资？ 人们所默认的是“善有善报恶有恶报”，但在流量时代，所默认的，所共知的，所习以为常不足为道的事情，想来很少会有人关注吧，只有那些吸引人眼球的，匪夷所思的信息会有更多人去围观，会有更多人愿意去推送以此获取流量。从而就导致了信息获取的不对称，产生了错觉。 即便错觉终究只是错觉，那么如果人们信以为真呢，如果错觉的内容不只是简单的糟糕的事情，而是一些能够左右人心的东西呢。","categories":[{"name":"叨叨","slug":"叨叨","permalink":"https://lyunvy.tk/categories/%E5%8F%A8%E5%8F%A8/"}],"tags":[{"name":"舆论","slug":"舆论","permalink":"https://lyunvy.tk/tags/%E8%88%86%E8%AE%BA/"}]},{"title":"Hexo-GitHub博客搭建","slug":"Hexo-GitHub博客搭建","date":"2021-02-06T12:30:40.000Z","updated":"2021-03-04T15:58:23.833Z","comments":true,"path":"hexogithub-blog-building/","link":"","permalink":"https://lyunvy.tk/hexogithub-blog-building/","excerpt":"看着hexo的文档就能做出来","text":"看着hexo的文档就能做出来 准备（本文基于Windows平台）​ Hexo的官方文档写的很好，本文只是个人建站总结，如需实际操作，建议看着官方文档来操作：文档 | Hexo Hexo安装 关于 Hexo 是一个快速、简洁且高效的博客框架。 Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装（官网：https://hexo.io/） Hexo需要电脑上已经安装node.js和git（已安装的可跳过） 安装Git 网址： https://git-scm.com/downloads与普通软件一样，更换软件安装位置之后，一直点击下一步，直至开始安装 安装node.js 下载安装程序：Download | Node.js安装即可(使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选）) 安装Hexo 打开右键菜单选择Git Bash Here(如果你正常安装好git后应该会有这个选项的) ​ 执行 1$ npm install -g hexo-cli ​ 安装Hexo 此时，可以使用npx hexo &lt;command&gt;来使用hexo命令，但为了方便直接使用hexo &lt;command&gt;, 我们执行 1echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中 初始化 打开作为博客文件的文件夹，在此文件夹中打开git bash， 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 第一条是新建存放各种文件的文件夹，不指定folder的话即直接将各种文件放在当前文件夹中 第二条是切换到新建的文件夹路径下，如果第一步没有新建文件夹，则不需要执行此命令 第三条是安装一些必需的程序 此时，你的文件夹里应该是这样的： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 执行hexo s 在浏览器中输入localhost:4000可看到预置的博客主题，之后在git bash中按ctrl+c可关闭hexo服务 为了之后使用git进行发布博客，还需要安装一个扩展 1npm i hexo-deployer-git GitHub 参见上一篇Lyunvy’s Blog 配置站点配置文件​ 关于配置文件，官方文档解释的最为详细，再次建议去查阅官方文档配置 | Hexo Hexo主题及配置​ Hexo有许多开源的主题Themes | Hexo我们可以选择一个喜欢的主题，这里pure主题为例：主题仓库：Hexo theme pure 主题预览：Cofess - Web Developer &amp; Designer ，在主题预览中可以找到作者关于主题的使用说明，可参照Hexo博客主题pure使用说明 在你的文件夹路径下打开git bash，执行 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 将主题clone到themes文件夹下 打开站点文件夹下的配置文件_config.yml，修改theme那一行为theme: pure,这样即启用了pure主题 安装各种插件： hexo-wordcount 1npm install hexo-wordcount --save hexo-generator-json-content 1npm install hexo-generator-json-content --save hexo-generator-feed 1npm install hexo-generator-feed --save hexo-generator-sitemap 1npm install hexo-generator-sitemap --save hexo-generator-baidu-sitemap 1npm install hexo-generator-baidu-sitemap --save hexo-neat 1npm install hexo-neat --save 在配置文件中添加一下内容： 12345678910111213141516# hexo-neatneat_enable: trueneat_html: enable: true exclude: neat_css: enable: true exclude: - &#x27;*.min.css&#x27;neat_js: enable: true mangle: true output: compress: exclude: - &#x27;*.min.js&#x27; 连接Github与本地 打开git bash，然后输入下面命令： 12git config --global user.name &quot;username&quot;git config --global user.email &quot;usermail&quot; ​ 用户名和邮箱根据你自己的github的信息自行修改。 生成密钥SSH key： 1ssh-keygen -t rsa -C &quot;usermail&quot; ​ 打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。 ​ git bash中输入 1cat ~/.ssh/id_rsa.pub ​ 将输出的内容复制到框中，点击确定保存 打开打开站点配置文件修改最后一行的配置： 1234deploy: type: git repository: https://github.com/***/***.github.io branch: master ​ repository修改为你自己的github项目地址 写作新建文章 ：在git bash 中输入 1hexo new &lt;title&gt; ​ &lt; title&gt;即为文章的标题，执行此命令后会在博客文件夹下的source\\_posts目录下创建一个*&lt; title&gt;.md*文件，此文件即为你新建的文章，在此文件中输入你的文章内容（最好使用markdown编辑工具来输入内容） 发布在博客目录下执行hexo g生成静态网页，然后执行hexo s可以本地预览效果，最后执行hexo d上传到github上。这时打开你的github.io主页即可以看到你新发布的博客啦 至此，基础的Hexo+GitHub已经搭建好啦，至于如何将它更加个性化，还是需要好好看文档呀~","categories":[{"name":"technology","slug":"technology","permalink":"https://lyunvy.tk/categories/technology/"}],"tags":[{"name":"Blog 搭建","slug":"Blog-搭建","permalink":"https://lyunvy.tk/tags/Blog-%E6%90%AD%E5%BB%BA/"}]},{"title":"无需代码搭建一个最简单的个人博客","slug":"无需代码搭建一个最简单的个人博客","date":"2021-02-02T18:51:47.000Z","updated":"2021-05-03T12:21:59.700Z","comments":true,"path":"/","link":"","permalink":"https://lyunvy.tk/","excerpt":"超简单","text":"超简单 Ready~~关于博客就是相当于知乎、微信公众号、QQ空间等这类发表自己观点、笔记、技术等乱七八糟东西的地方。 但其更加难以为大众搜索到，因此，发在上面的文章几乎不会有人读到，但建一个来玩玩还是挺好的， 万一谁无聊的时候看到了呢。 用到 GitHub Git（一个分布式版本控制软件） Gridea (一个静态博客写作客户端） 一颗折腾的心 😁 Go~~~Part 1—配置 注册GitHub账户（已经有的可跳过哦） 网址：github.com 👉 SIGN UP Create a repository（创建仓库） ↓↓↓↓↓↓ 注意：1.此时的 Repository name 需要按照 用户名.github.io 的格式来命名（这也是最终博客的地址）2. 选上 □ Add a README file 选项。 配置GitHub仓库 在头像处找到 Settings ，在设置菜单中，按照 Developer settings–Personal access tokens 的路径进入，点击右上方的 Generate new token 填上 Note 并选中 repo 后点击 Generate token 后生成一串字符即生成的token，此token将于Gridea配置中用到 安装Git（已安装的可跳过） 网址： https://git-scm.com/downloads与普通软件一样，更换软件安装位置之后，一直点击下一步，直至开始安装 配置Gridea 安装Gridea 网址：https://gridea.dev 填完后 检查远程连接 看是否可以连接成功，若失败。。那就再仔细检查一下咯。另外，Gridea的官方文档：https://gridea.dev/docs 也可以解决大部分问题哦，还不能解决的就找开发者吧。 Part 2—发布博客 Gridea的编辑器支持Markdown语法，可以学一下，挺简单的 写好文章之后 点击 预览 可以预览本地的文章，确认没问题后，点击 同步 将文章同步到GitHub上 同步完成后，在浏览器中输入网址：用户名.github.io（也就是GitHub仓库名），即可进入个人博客啦。 Finally~~~就这样，一个最简单的博客就建好了，基础的就是这些，剩下的就是各种折腾啦~ 撒花~ 努力丰富你的博客吧 预告~~下篇：Hexo-GitHub博客搭建😉😉","categories":[{"name":"technology","slug":"technology","permalink":"https://lyunvy.tk/categories/technology/"}],"tags":[{"name":"Blog 搭建","slug":"Blog-搭建","permalink":"https://lyunvy.tk/tags/Blog-%E6%90%AD%E5%BB%BA/"}]}],"categories":[{"name":"technology","slug":"technology","permalink":"https://lyunvy.tk/categories/technology/"},{"name":"叨叨","slug":"叨叨","permalink":"https://lyunvy.tk/categories/%E5%8F%A8%E5%8F%A8/"}],"tags":[{"name":"git","slug":"git","permalink":"https://lyunvy.tk/tags/git/"},{"name":"舆论","slug":"舆论","permalink":"https://lyunvy.tk/tags/%E8%88%86%E8%AE%BA/"},{"name":"Blog 搭建","slug":"Blog-搭建","permalink":"https://lyunvy.tk/tags/Blog-%E6%90%AD%E5%BB%BA/"}]}